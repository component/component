#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander')
  , component = require('..')
  , utils = component.utils
  , log = utils.log
  , path = require('path')
  , URL = require('url')
  , conf = {};

// options

program
  .usage('[pkg ...]')
  .option('-d, --dev', 'install development dependencies')
  .option('-o, --out <dir>', 'output components to the given <dir>')
  .option('-f, --force', 'force installation even if previously installed')
  .option('-s, --save', 'save the installed dep(s) to ./component.json')

// examples

program.on('--help', function(){
  console.log('  Examples:');
  console.log();
  console.log('    # install deps in ./component.json');
  console.log('    $ component install');
  console.log();
  console.log('    # install a single component');
  console.log('    $ component install component/tip');
  console.log();
  console.log('    # install several components');
  console.log('    $ component install component/tip component/popover');
  console.log();
  console.log('    # shell brace expansion ftw');
  console.log('    $ component install component/{tip,popover,dialog}');
  console.log();
  console.log('    # install a specific tag / sha');
  console.log('    $ component install component/tip@8bf1ffc3f');
  console.log();
  console.log('    # install regular & development deps in .');
  console.log('    $ component install -d');
  console.log();
});

// parse argv

program.parse(process.argv);

// pkgs

var pkgs = program.args;

// install from ./component.json

if (!pkgs.length) {
  var conf = config();

  if (conf.dependencies) {
    pkgs = normalize(conf.dependencies);
  }

  if (conf.development && program.dev) {
    pkgs = pkgs.concat(normalize(conf.development));
  }
}

// --save

if (program.save) {
  var fs = require('fs');
  var conf = config();
  conf.dependencies = conf.dependencies || {};
  pkgs.forEach(function(pkg){
    conf.dependencies[pkg] = '*';
  });
  fs.writeFile('component.json', JSON.stringify(conf, null, 2));
}

// install

console.log();
pkgs.forEach(function(pkgname){
  var parts = pkgname.split('@');
  pkgname = parts.shift();
  var version = parts.shift() || 'master';
  var conf = config();
  var registries = conf.registries || [];

  function installpkg(registry, fn) {
    var url
      , auth;

    if (registry) {
      url = registry.url;
      auth = registry.auth;
    } else {
      // Default registry gets the global, default auth
      auth = conf.auth;
    }
    
    var pkg = component.install(pkgname, version, {
      dest: program.out,
      force: program.force,
      dev: program.dev,
      auth: auth,
      remote: url
    });

    if (fn) {
      pkg.once('error', fn);
      pkg.once('end', fn);
    }

    if (registry) {
      report(pkg, 'warning');
    } else {
      report(pkg);
    }

	  pkg.install();
  }

  function trynextregistry() {
    var registry = Registry(registries.shift());
    if (registry) {
      installpkg(registry, function(err){
        if (err)
          return trynextregistry();
      });
    } else {
      // the last registry is the default one
      installpkg(null);
    }
  }

  trynextregistry();
});

// Registry

function Registry(reg) {
  var registry = {}

  if (!reg)
    return null;

  if (typeof reg === 'string') {
    var urlparts = URL.parse(reg);
    if (urlparts.auth) {
      var parts = urlparts.auth.split(':');
      registry.auth = {
        user: parts[0],
        pass: parts[1]
      };
      urlparts.auth = null;
    }
    registry.url = URL.format(urlparts)
  } else {
    registry = reg;
  }

  return registry;
}

// map deps to args

function normalize(deps) {
  return Object.keys(deps).map(function(name){
    return name + '@' + deps[name];
  });
}

// reporter

function report(pkg, level) {
  log('install', pkg.name + '@' + pkg.version);

  pkg.on('error', function(err){
    if (level === 'warning') {
      log('warning', err.message);
    } else {
      log('error', err.message);
      process.exit(1);
    }
  });

  pkg.on('dep', function(dep){
    log('dep', dep.name + '@' + dep.version);
    report(dep);
  });

  pkg.on('exists', function(dep){
    log('exists', dep.name + '@' + dep.version);
  });

  pkg.on('file', function(file){
    log('fetch', pkg.name + ':' + file);
  });

  pkg.on('end', function(){
    log('complete', pkg.name);
  });
}

// padding

process.on('exit', function(){
  console.log();
});

/**
 * Load configuration json.
 *
 * @return {Object}
 * @api private
 */

function config() {
  return require(path.resolve('component.json'));
}
