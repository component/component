#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander')
  , component = require('..')
  , utils = component.utils
  , path = require('path')
  , fs = require('fs')
  , join = path.join
  , read = fs.readFileSync
  , mkdir = require('mkdirp').sync
  , readme = require('../templates/readme');

// usage

program.usage('<dir>');

// parse

program.parse(process.argv);

// config

var conf = {};

// dest

var dir = program.args[0];

// require destination

if (!dir) utils.fatal('<dir> required');

/**
 * Verbose write.
 */

function write(path, str) {
  utils.log('create', path);
  fs.writeFileSync(path, str);
}

// prompt

program.prompt({
  repo: 'repo (username/project): ',
  desc: 'description: ',
  js: 'does this component have js? ',
  css: 'does this component have css? ',
  html: 'does this component have html? '
}, function(obj){
  // repo
  var repo = obj.repo.split('/');
  if (2 != repo.length) throw new Error('repo must be <username>/<project>');

  // name
  var name = repo[1];

  // populate json
  conf.name = obj.name = name;
  conf.repo = repo.join('/');
  conf.description = obj.desc;
  conf.version = "0.0.1";
  conf.keywords = [];
  conf.dependencies = {};
  conf.development = {};

  // dir
  console.log();
  utils.log('create', dir);
  mkdir(dir);

  // js
  if (bool(obj.js)) {
    conf.scripts = ["index.js"];
    write(join(dir, 'index.js'), '');
  }

  // html
  if (bool(obj.html)) {
    conf.scripts = conf.scripts || [];
    conf.scripts.push('template.js');
    write(join(dir, 'template.html'), '');
  }

  // css
  if (bool(obj.css)) {
    conf.styles = [name + '.css'];
    write(join(dir, name + '.css'), '');
  }

  // makefile
  write(join(dir, 'Makefile'), createMakefile(obj));

  // readme
  write(join(dir, 'Readme.md'), readme(obj));

  // .gitignore
  write(join(dir, '.gitignore'), 'components\nbuild\n');

  // write component.json
  write(join(dir, 'component.json'), JSON.stringify(conf, null, 2));

  console.log();
  process.exit();
});

/**
 * Boolean from `str`.
 */

function bool(str) {
  return 'yes' == str
    || 'y' == str;
}

/**
 * Create a makefile.
 */

function createMakefile(obj) {
  var buf = '\n';

  // build target
  buf += 'build: components';
  if (bool(obj.js)) buf += ' index.js';
  if (bool(obj.css)) buf += ' ' + obj.name + '.css';
  if (bool(obj.html)) buf += ' template.js';
  buf += '\n\t@component build --dev\n\n';

  // template.js target
  if (bool(obj.html)) {
    buf += 'template.js: template.html\n';
    buf += '\t@component convert $<\n\n';
  }

  // components target
  buf += 'components: component.json\n';
  buf += '\t@component install --dev\n\n';

  // clean phony
  buf += 'clean:\n';
  buf += '\trm -fr build components template.js\n\n';

  // PHONY
  buf += '.PHONY: clean\n';

  return buf;
}
