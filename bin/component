#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander')
  , component = require('..')
  , utils = component.utils
  , spawn = require('child_process').spawn
  , fs = require('fs')
  , exists = fs.existsSync
  , os = require('os');

// usage

program
  .version(require('../package').version)
  .usage('<command> [options]');

// sub-command help

program.on('--help', function(){
  console.log('  Commands:');
  console.log();
  console.log('    install <name ...>      install one or more components');
  console.log('    create <dir>            create a component skeleton');
  console.log('    search [query]          search with the given query');
  console.log('    convert <file ...>      convert html files to js modules');
  console.log('    register                register a component so others can find it');
  console.log('    info <name> [prop]      output json component information');
  console.log('    changes <name>          output changelog contents');
  console.log('    docs <name>             output readme contents');
  console.log('    open <name>             open component github repo');
  console.log('    build                   build the component');
  console.log('    ls                      list installed components');
  console.log();
  process.exit();
});

// parse argv

program.parse(process.argv);

// args void of cmd

var args = process.argv.slice(3);

// command

var cmd = program.args[0];

// alias "install" as "add"

if ('add' == cmd) cmd = 'install';

// display help

if (!cmd) {
  process.stdout.write(program.helpInformation());
  program.emit('--help');
  process.exit();
}

var commandName = 'component-' + cmd;
var proc = startProc(commandName, args);

proc.on('exit', function(code){  
  if (127 == code) utils.fatal('the "' + cmd + '" command does not exist');
});

function startProc(commandName, args){
  if (os.type() === 'Windows_NT'){
    return startProcWindows(commandName, args);      
  }
  else {
    return startProcNonWindows(commandName, args);
  }
}

function startProcWindows(commandName, args){
  var bin = "cmd";
  var cmdArgs = ["/C", commandName].concat(args);
  return spawn(bin, cmdArgs, {stdio:"inherit"});
}

function startProcNonWindows(commandName, args){
  return spawn(commandName, args, {stdio:"inherit"});
}



