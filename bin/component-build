#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander')
  , Builder = require('component-builder')
  , component = require('..')
  , utils = component.utils
  , log = component.utils.log
  , path = require('path')
  , fs = require('fs')
  , mkdir = require('mkdirp');

// options

program
  .option('-d, --dev', 'build development dependencies')
  .option('-S, --separate', 'output separate files instead of a single concatenated file')
  .option('-s, --standalone <name>', 'build a stand-alone version of the component')
  .option('-o, --out <dir>', 'output directory defaulting to ./build', 'build')
  .option('-n, --name <file>', 'base name for build files defaulting to build', 'build')
  .option('-v, --verbose', 'output verbose build information')
  .option('-p, --prefix <str>', 'prefix css asset urls with <str>')

// examples

program.on('--help', function(){
  console.log('  Examples:');
  console.log();
  console.log('    # build to ./build');
  console.log('    $ component build');
  console.log();
  console.log('    # build to ./dist as assets.js, assets.css');
  console.log('    $ component build -o dist -n assets');
  console.log();
  console.log('    # build standalone as window.$');
  console.log('    $ component build --standalone $');
  console.log();
});

// parse argv

program.parse(process.argv);

// load json

var conf = require(path.resolve('component.json'));

// standalone

var standalone = program.standalone;

// mkdir -p

mkdir.sync(program.out);

// build

var builder = new Builder(process.cwd());
builder.copyAssetsTo(program.out);
if (program.dev) builder.prefixUrls('./');
if (program.prefix) builder.prefixUrls(program.prefix);

// lookup paths

if (conf.paths) builder.addLookup(conf.paths);

var start = new Date;

// --dev

if (program.dev) {
  builder.development();
  builder.addSourceURLs();
}

// build

// --separate

if (program.separate) builder.separate();

if (program.verbose) console.log();
builder.build(function(err, obj){
  if (err) utils.fatal(err.message);

  var name = 'string' == typeof standalone
    ? standalone
    : conf.name;

  if (program.separate) {
    [{file: 'require.js', content: obj.require}].concat(obj.js)
      .forEach(function (js, i) {
      var out = fs.createWriteStream(path.join(program.out, i + '-' + js.file));
      out.write(js.content);
      if (program.verbose) log('write', out.path);
    });

    obj.css.forEach(function (css, i) {
      var out = fs.createWriteStream(path.join(program.out, i + '-' + css.file));
      out.write(css.content);
      if (program.verbose) log('write', out.path);
    });
  } else {
    var js = fs.createWriteStream(path.join(program.out, program.name + '.js'));
    if (standalone) js.write(';(function(){\n');
    js.write(obj.require);
    js.write(obj.js);
    if (standalone) js.write('  if ("undefined" == typeof module) {\n');
    if (standalone) js.write('    window.' + name + ' = require("' + conf.name + '");\n');
    if (standalone) js.write('  } else {\n');
    if (standalone) js.write('    module.exports = require("' + conf.name + '");\n');
    if (standalone) js.write('  }\n');
    if (standalone) js.write('})();');
    if (program.verbose) log('write', js.path);

    var css = fs.createWriteStream(path.join(program.out, program.name + '.css'));
    css.write(obj.css);
    if (program.verbose) log('write', css.path);
  }

  if (!program.verbose) return;
  var duration = new Date - start;
  var jslength = program.separate ?
    obj.js.map(function (js) { return js.content.length; }).reduce(function (a, b) { return a + b; }, 0) :
    obj.js.length;
  var csslength = program.separate ?
    obj.css.map(function (css) { return css.content.length; }).reduce(function (a, b) { return a + b; }, 0) :
    obj.css.length;
  log('js', (jslength / 1024 | 0) + 'kb');
  log('css', (csslength / 1024 | 0) + 'kb');
  log('duration', duration + 'ms');
  console.log();
});
